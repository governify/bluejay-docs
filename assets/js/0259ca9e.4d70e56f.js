"use strict";(self.webpackChunkbluejay_docs=self.webpackChunkbluejay_docs||[]).push([[8069],{76:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/extending-bluejay/custom-tasks/optimize-calculation-period","title":"Optimize Calculation Period","description":"Optimize","source":"@site/versioned_docs/version-1.1/development/extending-bluejay/custom-tasks/optimize-calculation-period.md","sourceDirName":"development/extending-bluejay/custom-tasks","slug":"/development/extending-bluejay/custom-tasks/optimize-calculation-period","permalink":"/development/extending-bluejay/custom-tasks/optimize-calculation-period","draft":false,"unlisted":false,"editUrl":"https://github.com/governify/bluejay-docs/edit/main/versioned_docs/version-1.1/development/extending-bluejay/custom-tasks/optimize-calculation-period.md","tags":[],"version":"1.1","lastUpdatedBy":"Pablo Fernandez","lastUpdatedAt":1751790370000,"sidebarPosition":4,"frontMatter":{"title":"Optimize Calculation Period","description":"Optimize","sidebar_position":4,"hide_table_of_contents":false,"keywords":["Bluejay","optimize calculation period","TPA optimization","batch processing","task runner","custom tasks","Bluejay assets","computation scheduling","task management","automatic calculations","script configuration","JSON files processing","performance optimization","Governify","bluejay tasks","date adjustment"]},"sidebar":"defaultSidebar","previous":{"title":"Create or Update TPA","permalink":"/development/extending-bluejay/custom-tasks/create-or-update-tpa"},"next":{"title":"Adding New Sources","permalink":"/development/extending-bluejay/adding-new-sources"}}');var s=t(4848),a=t(8453);const o={title:"Optimize Calculation Period",description:"Optimize",sidebar_position:4,hide_table_of_contents:!1,keywords:["Bluejay","optimize calculation period","TPA optimization","batch processing","task runner","custom tasks","Bluejay assets","computation scheduling","task management","automatic calculations","script configuration","JSON files processing","performance optimization","Governify","bluejay tasks","date adjustment"]},r="Optimize Calculation Period",l={},c=[{value:"Load Optimize Calculation Period",id:"load-optimize-calculation-period",level:2},{value:"Configure the script",id:"configure-the-script",level:2},{value:"Run the script",id:"run-the-script",level:2},{value:"Technical details",id:"technical-details",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"optimize-calculation-period",children:"Optimize Calculation Period"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Bluejay has an automatic calculation system for its TPAs. However, fetching data and calculating metrics for a course consisting of numerous teams can lead to performance issues."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:'"Optimize Calculation Period"'})," script aims to resolve the challenge of multiple automatic calculations triggering simultaneously within a course.\nIt achieves this by ",(0,s.jsx)(n.strong,{children:"evenly distributing"})," the execution times for these calculations across a given period of time."]}),"\n",(0,s.jsxs)(n.p,{children:["This script is one of the ",(0,s.jsx)(n.a,{href:"https://docs.governify.io/development/extending-governify/custom-tasks",children:"Custom Tasks of Extending Governify"}),", and it is stored within the assets-bluejay repository ",(0,s.jsx)(n.a,{href:"https://github.com/governify/assets-bluejay/blob/main/public/director/tasks/utils/optimizeCalculationPeriod/script.js",children:"(link)"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In this document, we will discuss how to load, configure, and run the script from the user interface. If you want to see the inner workings of this script, we will provide an explanation of the technical details in the last section."}),"\n",(0,s.jsx)(n.h2,{id:"load-optimize-calculation-period",children:"Load Optimize Calculation Period"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Go to  ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"ui.bluejay.[YourDomain]"})})]}),"\n",(0,s.jsx)(n.li,{children:"Click on Admin UI"}),"\n",(0,s.jsx)(n.li,{children:"Click on the Task Runner tab"}),"\n",(0,s.jsxs)(n.li,{children:["Open the dropdown and select ",(0,s.jsx)(n.strong,{children:"optimizeCalculationPeriod."})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"load optimize",src:t(2426).A+"",width:"2680",height:"539"})}),"\n",(0,s.jsx)(n.h2,{id:"configure-the-script",children:"Configure the script"}),"\n",(0,s.jsx)(n.p,{children:"Let's have a look at the Configuration.json parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"filenameMustIncludeAll"}),": ",(0,s.jsx)(n.em,{children:"string array"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This field specifies the substrings that must be included in the filenames of computation tasks in the director's folder inside the Bluejay assets. This can be used to filter the tasks by courseName, year, etc. Example name of the files: ",(0,s.jsx)(n.code,{children:"tpa-class01-GH-motero2k_Bluejay-test-TPA-23-24.json"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"startingTime"}),": ",(0,s.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["The starting time in 24-hour format (HH",":mm",") from which the calculations should begin for the teams selected."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"endingTime"}),": ",(0,s.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["The ending time in 24-hour format (HH",":mm",") by which all calculations should be completed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"batchSize"}),": ",(0,s.jsx)(n.em,{children:"int"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This field indicates the number of teams that can be activated at the same time."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example:"})," ",(0,s.jsx)(n.strong,{children:"5 teams"})," in a course ",(0,s.jsx)(n.code,{children:"class01"})," with activated automatic calculations at any time. The script with the following configuration will distribute evenly the calculations between ",(0,s.jsx)(n.code,{children:"14:00"})," and ",(0,s.jsx)(n.code,{children:"16:00"})," in batches of ",(0,s.jsx)(n.code,{children:"2"})," teams each."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "filenameMustIncludeAll": ["tpa-","class01"],\n    "startingTime": "14:00",\n    "endingTime": "16:00",\n    "batchSize": 2\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"-----------------------------------------\nexpected result:\n5 teams / 2 teams per batch = 2 batches of 2 + 1 batch of 1, total 3 batches.\n\n-----------------------------------------\nbatch1 14:00 -> Team1 and Team2\nbatch2 15:00 -> Team3 and Team4\nbatch3 16:00 -> Team5 \n"})}),"\n",(0,s.jsx)(n.h2,{id:"run-the-script",children:"Run the script"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Click run"})," and you will see the results in the log of ",(0,s.jsx)(n.strong,{children:"Result.json:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "date": "2023-10-01T15:40:21.658Z",\n  "log": [\n    "Current directory: /opt/app/tasks",\n    "Searching for JSON files containing: class1",\n    "Active computations: ",\n    [\n      "tpa-class1-GH-motero2k_Bluejay-test-TPA-23-24",\n      "tpa-class1-GH-motero2k_Test-Repo-for-Bluejay-copy1",\n      "tpa-class1-GH-motero2k_Test-Repo-for-Bluejay-copy2",\n      "tpa-class1-GH-motero2k_Test-Repo-for-Bluejay-copy3",\n      "tpa-class1-GH-motero2k_test2-for-bluejay"\n    ],\n    "5 files in groups of 2 = 3 ,minutesBetweenRuns: 60",\n    #changed configuration files are shown here\n    ,\n    "script end"\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"bear in mind",type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can check the new dates in the ",(0,s.jsx)(n.strong,{children:"Task Management"})," tab"]}),"\n",(0,s.jsxs)(n.li,{children:["If you want to execute this script again, you must ",(0,s.jsx)(n.strong,{children:"turn off and on all automatic calculations in the course"})," (this resets the launch times to default)."]}),"\n",(0,s.jsxs)(n.li,{children:["Bluejay use ",(0,s.jsx)(n.code,{children:"tpa-"})," prefix for the automatic agreements calculations, so it is recommended to use this prefix in the filenameMustIncludeAll field."]}),"\n"]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"technical-details",children:"Technical details"}),"\n",(0,s.jsxs)(n.p,{children:["This section explains line by line the ",(0,s.jsx)(n.strong,{children:"optimizeCalculationPeriod"})," ",(0,s.jsx)(n.a,{href:"https://github.com/governify/assets-bluejay/blob/main/public/director/tasks/utils/optimizeCalculationPeriod/script.js",children:"script.js"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Imports:"})," fs for file writing, path for joining strings as paths and moment to modify the dates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"\"use strict\";\n\nconst fs = require('fs');\nconst path = require('path');\nconst moment = require('moment');\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["These lines belong to the ",(0,s.jsx)(n.a,{href:"https://github.com/governify/assets-bluejay/blob/main/public/director/tasks/examples/template/script.js",children:"script.js template"}),"."]})," This is necessary to execute a custom task a receive a result in the UI:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"\nmodule.exports.main = async (config) => {\n  let result = { date: new Date(), log: [] };\n  const log = (data) => {console.log(data);result.log.push(data)};\n  const throwError = (message) => {result.log.push(message); \n  throw new Error(result.log[result.log.length-1])}\n  try {\n    //SCRIPT BEGIN\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Config variables"}),": Extracting and validating the configuration variables."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:'    const batchSize = config.batchSize\n    const startingTimeZstring = config.startingTime\n    const endingTimeZstring = config.endingTime\n    const filenameMustIncludeAll = config.filenameMustIncludeAll;\n\n    if(!Array.isArray(filenameMustIncludeAll) || filenameMustIncludeAll.length < 1) throw new Error("filenameMustInclude must be a string array")\n    if(typeof startingTimeZstring != "string" || typeof endingTimeZstring != "string") throw new Error("startingTime and endingTime must be strings")\n\n    if(!moment(startingTimeZstring, \'HH:mm\', true).isValid()) throw new Error("startingTime is not a valid time in 24h format (HH:mm)")\n    if(!moment(endingTimeZstring, \'HH:mm\', true).isValid()) throw new Error("endingTime is not a valid time in 24h format (HH:mm)")\n\n    if(typeof batchSize != "number" ) throw new Error("BatchSize must be number")\n    if(batchSize<1 || 20<  batchSize) throw new Error("BatchSize out of bounds [0,20]")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parsing time variables and searching for JSON files."})}),"\n",(0,s.jsx)(n.p,{children:"The json files (active calculations) are searched in the tasks folder of the bluejay assets. The files are filtered by the filenameMustIncludeAll strings."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"    const startingTime = moment(startingTimeZstring, 'HH:mm');\n    const endingTime = moment(endingTimeZstring, 'HH:mm');\n\n    const currentDirectory = path.join(process.cwd(), 'tasks');\n    log(`Current directory: ${currentDirectory}`);\n    log(`Searching for JSON files containing: ${filenameMustIncludeAll}`);\n\n    const jsonFilesNames = fs.readdirSync(currentDirectory)\n    .filter(fileName => fileName.endsWith('.json')) \n    .filter(fileName => filenameMustIncludeAll.every(mustHaveString => fileName.includes(mustHaveString)))\n    .map(fileName => path.parse(fileName).name);\n\n    if(jsonFilesNames.length < 1){\n      throwError(\"Automatic computations not found in course containing \"+ filenameMustIncludeAll)\n    }\n    log(\"Active computations: \")\n    log(jsonFilesNames)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Determining the number of batches and the time interval between them."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:'    if(batchSize > jsonFilesNames.length) throwError(`batch number too big (${batchSize}) for ${jsonFilesNames.length} groups`)\n    const numberOfBatchs =  Math.ceil(jsonFilesNames.length / batchSize)\n    if(numberOfBatchs <1 ) {log("All done, nothing changed");return result}\n    const numberOfBatchsNormalized = numberOfBatchs-1\n    const timeBetweenRuns = (endingTime.diff(startingTime) / numberOfBatchsNormalized);\n    log(`${jsonFilesNames.length} files in groups of ${batchSize} = ${numberOfBatchs} ,minutesBetweenRuns: ${timeBetweenRuns/60000} minutes`)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Adjusting the NEW initial and end dates for each computation task."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"    jsonFilesNames.forEach((file, index) => {\n      const fullFilePath = path.join(currentDirectory, file+\".json\");\n\n      const content = fs.readFileSync(fullFilePath, 'utf8') \n\n      const data = JSON.parse(content);\n\n      const initDate = moment.utc(data.init, 'YYYY-MM-DDTHH:mm:ss.SSSZ');\n      const endDate = moment.utc(data.end, 'YYYY-MM-DDTHH:mm:ss.SSSZ');\n\n      const adjustedInit = initDate\n      .set({hour: startingTime.hours(), minute: startingTime.minutes(), second:0, milisecond:0}) \n      .add((index%numberOfBatchs) * timeBetweenRuns , 'ms');\n      const adjustedEnd = endDate\n      .set({hour: adjustedInit.hours(), minute: adjustedInit.minutes()})\n      \n      data.init = adjustedInit.format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n      data.end = adjustedEnd.format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n\n      const updatedContent = JSON.stringify(data, null, 2);\n      \n      fs.writeFileSync(fullFilePath, updatedContent, 'utf8');\n      log(`Updated file content:`);\n      log(data);\n      \n    });\n\n    log(\"script end\")\n    return result;\n    //SCRIPT END\n\n  } catch (error) {\n    return { error: error.stack.split('\\n').slice(0,10), log: result.log };\n  }\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},2426:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/load-optimize-90a8f134b0fa5346503a702d0270fa20.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);